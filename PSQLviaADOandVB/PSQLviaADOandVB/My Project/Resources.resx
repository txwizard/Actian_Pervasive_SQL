<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ERRMSG_DUPLICATE_COLUMN_NAME" xml:space="preserve">
    <value>Duplicate column name</value>
    <comment>The public ValidColumnName constructor uses this message to report a duplicate column name.</comment>
  </data>
  <data name="MSG_COLUMNNAMESANDLABELS_TOSTRING" xml:space="preserve">
    <value>ColumnName = {0}, ColumnIndex = {1}, ColumnValue = {2}, ColumnLabel = {3}</value>
    <comment>The ToString method on FieldNamesAndLabels formats its output from this template.</comment>
  </data>
  <data name="MSG_COLUMN_LABEL_STRING_AMOUNT_OWED" xml:space="preserve">
    <value>Amount Owed: {0}</value>
    <comment>Method ListAllFieldsOnConsole uses this template to display the column at index 3.</comment>
  </data>
  <data name="MSG_COLUMN_LABEL_STRING_AMOUNT_PAID" xml:space="preserve">
    <value>Amount Paid: {0}</value>
    <comment>Method ListAllFieldsOnConsole uses this template to display the column at index 4.</comment>
  </data>
  <data name="MSG_COLUMN_LABEL_STRING_COMMENTS" xml:space="preserve">
    <value>Comments: {0}</value>
    <comment>Method ListAllFieldsOnConsole uses this template to display the column at index 6.</comment>
  </data>
  <data name="MSG_COLUMN_LABEL_STRING_LOG" xml:space="preserve">
    <value>Log: {0}</value>
    <comment>Method ListAllFieldsOnConsole uses this template to display the column at index 2.</comment>
  </data>
  <data name="MSG_COLUMN_LABEL_STRING_REGISTRAR_ID" xml:space="preserve">
    <value>Registrar ID: {0}</value>
    <comment>Method ListAllFieldsOnConsole uses this template to display the column at index 5.</comment>
  </data>
  <data name="MSG_COLUMN_LABEL_STRING_STUDENT_ID" xml:space="preserve">
    <value>Student ID: {0}</value>
    <comment>Method ListAllFieldsOnConsole uses this template to display the column at index 0.</comment>
  </data>
  <data name="MSG_COLUMN_LABEL_STRING_TRANSACTION_NUMBER" xml:space="preserve">
    <value>Transaction Number: {0}</value>
    <comment>Method ListAllFieldsOnConsole uses this template to display the column at index 1.</comment>
  </data>
  <data name="MSG_EXCEPTION_HRESULT" xml:space="preserve">
    <value>    Exception HResult: {0}</value>
    <comment>The exception handler in the catch block of the main routine uses these string to construct the exception report that it displays on the application's console.</comment>
  </data>
  <data name="MSG_EXCEPTION_SOURCE" xml:space="preserve">
    <value>    Exception Source: {0}</value>
    <comment>The exception handler in the catch block of the main routine uses these string to construct the exception report that it displays on the application's console.</comment>
  </data>
  <data name="MSG_EXCEPTION_STACKTRACE" xml:space="preserve">
    <value>    Exception StackTrace: {0}{1}</value>
    <comment>The exception handler in the catch block of the main routine uses these string to construct the exception report that it displays on the application's console.</comment>
  </data>
  <data name="MSG_EXCEPTION_TARGETSITE" xml:space="preserve">
    <value>    Exception TargetSite: {0}</value>
    <comment>The exception handler in the catch block of the main routine uses these string to construct the exception report that it displays on the application's console.</comment>
  </data>
  <data name="MSG_EXCEPTION_TYPE_AND_MESSAGE" xml:space="preserve">
    <value>An {0} exception arose.{2}{2}    Exception Message: {1}</value>
    <comment>The exception handler in the catch block of the main routine uses these string to construct the exception report that it displays on the application's console.</comment>
  </data>
  <data name="MSG_PROGRAM_BEGIN" xml:space="preserve">
    <value>{0}, version {1}{4}Started at {2} ({3} UTC)</value>
    <comment>Helper method DisplayStartupBanner formats its message from this string.</comment>
  </data>
  <data name="MSG_PROGRAM_DONE" xml:space="preserve">
    <value>{0} completed at {1}{3}Running time: {2}</value>
    <comment>Helper method DisplayShutdownBanner formats its message from this string.</comment>
  </data>
  <data name="MSG_SHUTDOWN_NORMALLY" xml:space="preserve">
    <value>Execution succeeded.</value>
    <comment>Helper method ShutdownNormally formats its report from this template.</comment>
  </data>
  <data name="MSG_SHUTDOWN_WITH_ERROR" xml:space="preserve">
    <value>Execution failed with status code {0:0x8x} ({1} decimal).</value>
    <comment>Helper method ShutdownAbnormally formats its report from this template.</comment>
  </data>
  <data name="MSG_WAIT_FOR_CARBON_UNIT" xml:space="preserve">
    <value>Press the RETURN key to return to Windows.</value>
    <comment>Helper method WaitForCarbonUnit formats its prompt from this template.</comment>
  </data>
  <data name="UNIQUE_COLUMN_NAME_TOSTRING" xml:space="preserve">
    <value>ColumnName = {0}, ColumnLabel = {1}</value>
    <comment>The ToString method on UniqueColumnName instances use this template to return their value.</comment>
  </data>
</root>