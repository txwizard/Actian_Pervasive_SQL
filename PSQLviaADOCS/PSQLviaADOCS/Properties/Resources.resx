<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ERRMSG_DUPLICATE_COLUMN_NAME" xml:space="preserve">
    <value>Duplicate column name</value>
    <comment>The public ValidColumnName constructor uses this message to report a duplicate column name.</comment>
  </data>
  <data name="ERRMSG_INTERNAL_SQL_ERROR" xml:space="preserve">
    <value>Internal error: The value in column zero of the result set returned by SQL query {0} is {1}, which cannot be converted to a long integer.</value>
    <comment>Callback routine AssignNextID formats an error message from this string to repost that the value returned by the SQL query that it sent to the data base returned an invalid integral value.</comment>
  </data>
  <data name="ERRMSG_INVALID_BOOLEAN_VALUE" xml:space="preserve">
    <value>The specified value is not a valid Boolean string value.</value>
    <comment>static Method ADOHelpers.ParseAndConvertBoolean attaches this string to its ArgumentOutOfRange exception reports.</comment>
  </data>
  <data name="ERRMSG_INVALID_DATE_CONVERSION" xml:space="preserve">
    <value>The specified input value cannot be converted to the specified numeric type.</value>
    <comment>Static method ADOHelpers.ParseAndConvertDBDate attaches this to the ArgumentOutOfRangeException exception that it throws when instructed to report invalid inputs through an exception.</comment>
  </data>
  <data name="ERRMSG_INVALID_NAME" xml:space="preserve">
    <value>{1}Table name {0} is invalid.{1}</value>
    <comment>Main module helper routine PromptForTableName formats a message when the specified table name is invalid.</comment>
  </data>
  <data name="ERRMSG_INVALID_SCHEMA_LINE" xml:space="preserve">
    <value>Line {0} in {1} table schema file {2} is invalid.{6}    Expected Column Count = {3}{6}    Actual Column Count   = {4}{6}    Text of Invalid Line  = {5}{6}</value>
    <comment>In the unlikely event that the schema file becomes corrupted, this message identifies the affected line and the cause of the corruption.</comment>
  </data>
  <data name="ERRMSG_NUMERIC_CONVERSION" xml:space="preserve">
    <value>The specified input value cannot be converted to the specified numeric type.</value>
    <comment>Static methods on the ADOHelpers class use this message to report numeric conversion errors.</comment>
  </data>
  <data name="ERRMSG_PREFIX_INVALID_VERB" xml:space="preserve">
    <value>is not a valid value for CrudVerb.</value>
    <comment>EvaluateCrudVerb examines the exception to confirm that it contains this string, which is expected when the routine gets an invalid verb.</comment>
  </data>
  <data name="MSG_COLUMNNAMESANDLABELS_TOSTRING" xml:space="preserve">
    <value>TableName = {0}, ColumnName = {1}, ColumnIndex = {2}, ColumnValue = {3}, ColumnLabel = {4}</value>
    <comment>The ToString method on FieldNamesAndLabels formats its output from this template.</comment>
  </data>
  <data name="MSG_COLUMN_PROPERTIES_LABEL_ROW" xml:space="preserve">
    <value>Index\tName\tActualSize\tAttributes\tDataFormat\tDefinedSize\tNumericScale\tPrecision\tProperties_Count\tStatus\tType</value>
    <comment>The ListTableColumnProperties method uses this string as its label row.</comment>
  </data>
  <data name="MSG_DISPLAY_TABLE_NAME_AND_VERB" xml:space="preserve">
    <value>Processing PSQL database table {0}{2}                Action Taken = {1}{2}</value>
    <comment>The main routine formats a message that displays the name of the table being processed on the console output stream.</comment>
  </data>
  <data name="MSG_EXCEPTION_HRESULT" xml:space="preserve">
    <value>    Exception HResult: {0}</value>
    <comment>The exception handler in the catch block of the main routine uses these string to construct the exception report that it displays on the application's console.</comment>
  </data>
  <data name="MSG_EXCEPTION_SOURCE" xml:space="preserve">
    <value>    Exception Source: {0}</value>
    <comment>The exception handler in the catch block of the main routine uses these string to construct the exception report that it displays on the application's console.</comment>
  </data>
  <data name="MSG_EXCEPTION_STACKTRACE" xml:space="preserve">
    <value>    Exception StackTrace: {0}{1}</value>
    <comment>The exception handler in the catch block of the main routine uses these string to construct the exception report that it displays on the application's console.</comment>
  </data>
  <data name="MSG_EXCEPTION_TARGETSITE" xml:space="preserve">
    <value>    Exception TargetSite: {0}</value>
    <comment>The exception handler in the catch block of the main routine uses these string to construct the exception report that it displays on the application's console.</comment>
  </data>
  <data name="MSG_EXCEPTION_TYPE_AND_MESSAGE" xml:space="preserve">
    <value>An {0} exception arose.{2}{2}    Exception Message: {1}</value>
    <comment>The exception handler in the catch block of the main routine uses these string to construct the exception report that it displays on the application's console.</comment>
  </data>
  <data name="MSG_INFO_ASSIGNED_COLUMN_VALUE" xml:space="preserve">
    <value>        {0}: {1} value assigned by system = {2}</value>
    <comment>Method AddNewRows displays this message once for each column (field) that gets its value assigned by the program.</comment>
  </data>
  <data name="MSG_INPUT_TOO_LONG" xml:space="preserve">
    <value>The input string is too long.{4}    Input string         = {0}{4}    Input string length  = {1}{4}    Maximum field length = {2}{4}    Truncated string     = {3}{4}</value>
    <comment>Static ADOHelpers method ParseAndConvertString formats its exception report from this string.</comment>
  </data>
  <data name="MSG_LABEL_FOR_LISTING" xml:space="preserve">
    <value>Listing</value>
    <comment>The DoTask routine on the main module constructs its summary report from this template.</comment>
  </data>
  <data name="MSG_LABEL_FOR_PROPERTIES_LIST" xml:space="preserve">
    <value>Column Properties</value>
    <comment>Static method ListTableColumnProperties uses this template to make its final report.</comment>
  </data>
  <data name="MSG_LABEL_FOR_TABLE" xml:space="preserve">
    <value>Table  </value>
    <comment>The DoTask routine on the main module constructs its summary report from this template.</comment>
  </data>
  <data name="MSG_PROGRESS_UPDATE" xml:space="preserve">
    <value>    Listing record # {0} of {1}</value>
    <comment>Main module subroutine ListAllFieldsOnConsole uses this message to update the console.</comment>
  </data>
  <data name="MSG_PROMPT_COLUMN_NAME" xml:space="preserve">
    <value>Enter name of column (field) against which to match: ---&gt;&gt; </value>
    <comment>Method PromptForSelectionCriteria displays this prompt.</comment>
  </data>
  <data name="MSG_PROMPT_FOR_FIELD_VALUE" xml:space="preserve">
    <value>        {0}: Enter value for field {1}: </value>
    <comment>Method AddNewRows displays this message once for each column (field) in the table.</comment>
  </data>
  <data name="MSG_PROMPT_FOR_NEW_VALUES" xml:space="preserve">
    <value>    Enter values for the new record in response to the following prompts.{0}</value>
    <comment>Method AddNewRows displayss this message once before it begins prompting for new field values.</comment>
  </data>
  <data name="MSG_PROMPT_FOR_TABLE_NAME" xml:space="preserve">
    <value>    Specify which table to process.</value>
    <comment>Static method PromptForTableName in the main module displays this text to request a missing table name.</comment>
  </data>
  <data name="MSG_PROMPT_MATCH_STRING" xml:space="preserve">
    <value>Column Field Value:                                  ---&gt;&gt; </value>
    <comment>Method PromptForSelectionCriteria displays this prompt.</comment>
  </data>
  <data name="MSG_PROMPT_TRUNCATE_OK" xml:space="preserve">
    <value>The input string is too long.{1}    To make it fit, it must be truncated to {0}.{1}    Is that OK (Y/N)? </value>
    <comment>Method PromptForSelectionCriteria displays this prompt.</comment>
  </data>
  <data name="MSG_PROPMT_CRITERION" xml:space="preserve">
    <value>Enter selection criterion:                           ---&gt;&gt; </value>
    <comment>Method PromptForSelectionCriteria displays this prompt.</comment>
  </data>
  <data name="MSG_RECORD_LABEL_PREFIX" xml:space="preserve">
    <value>Record Number {0}: </value>
    <comment>The first column (field) shown on the report is the record ID, which has this as its prefix. Everything else gets whitespace.</comment>
  </data>
  <data name="MSG_REPORT_HEADER" xml:space="preserve">
    <value>Report Name: Listing of Everything in a PSQL Table{4}Run Date: {0} ({1} UTC){4}{4}Table Name       = {2}{4}Records in Table = {3}{4}</value>
    <comment>Main module subroutine ListAllFieldsOnConsole uses this message to label the detail report.</comment>
  </data>
  <data name="MSG_SCHEMA_PROGRESS" xml:space="preserve">
    <value>    Listing Column # {0}, {1} of table {2}</value>
    <comment>Method ListPropertiesOfColumn uses this template for its progress messages.</comment>
  </data>
  <data name="MSG_SELECTION_CRITERIA" xml:space="preserve">
    <value>{3}Selection Criteria:{3}{3}    Column (Field) Name = {0}{3}    Criterion Value     = {2}{3}    Criterion Condition = {1}{3}</value>
    <comment>Method PromptForSelectionCriteria generates its summary report message from this template.</comment>
  </data>
  <data name="MSG_SELECT_QUERY" xml:space="preserve">
    <value>    SQL SELECT Query    = {0}{1}</value>
    <comment>Method AssembleSelectQuery displays its result through this message template.</comment>
  </data>
  <data name="MSG_SHUTDOWN_NORMALLY" xml:space="preserve">
    <value>Execution succeeded.</value>
    <comment>Helper method ShutdownNormally formats its report from this template.</comment>
  </data>
  <data name="MSG_SHUTDOWN_WITH_ERROR" xml:space="preserve">
    <value>Execution failed with status code {0:0x8x} ({1} decimal).</value>
    <comment>Helper method ShutdownAbnormally formats its report from this template.</comment>
  </data>
  <data name="MSG_TASK_SUMMARY" xml:space="preserve">
    <value>{0}{1} File Name = {2}</value>
    <comment>The DoTask routine on the main module constructs its summary report from this template.</comment>
  </data>
  <data name="MSG_WAIT_FOR_CARBON_UNIT" xml:space="preserve">
    <value>Press the RETURN key to return to Windows.</value>
    <comment>Helper method WaitForCarbonUnit formats its prompt from this template.</comment>
  </data>
  <data name="REPORT_FOOTER" xml:space="preserve">
    <value>End of report, Total records = {0}</value>
    <comment>Main module subroutine ListAllFieldsOnConsole uses this message to mark the end of the itemized listing report.</comment>
  </data>
  <data name="UNIQUE_COLUMN_NAME_TOSTRING" xml:space="preserve">
    <value>ColumnName = {0}, ColumnLabel = {1}</value>
    <comment>The ToString method on UniqueColumnName instances use this template to return their value.</comment>
  </data>
</root>