<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ERRMSG_DUPLICATE_COLUMN_NAME" xml:space="preserve">
    <value>Duplicate column name</value>
    <comment>The public ValidColumnName constructor uses this message to report a duplicate column name.</comment>
  </data>
  <data name="ERRMSG_INVALID_NAME" xml:space="preserve">
    <value>{1}Table name {0} is invalid.{1}</value>
    <comment>Main module helper routine PromptForTableName formats a message when the specified table name is invalid.</comment>
  </data>
  <data name="ERRMSG_INVALID_SCHEMA_LINE" xml:space="preserve">
    <value>Line {0} in {1} table schema file {2} is invalid.{6}    Expected Column Count = {3}{6}    Actual Column Count   = {4}{6}    Text of Invalid Line  = {5}{6}</value>
    <comment>In the unlikely event that the schema file becomes corrupted, this message identifies the affected line and the cause of the corruption.</comment>
  </data>
  <data name="MSG_COLUMNNAMESANDLABELS_TOSTRING" xml:space="preserve">
    <value>TableName = {0}, ColumnName = {1}, ColumnIndex = {2}, ColumnValue = {3}, ColumnLabel = {4}</value>
    <comment>The ToString method on FieldNamesAndLabels formats its output from this template.</comment>
  </data>
  <data name="MSG_EXCEPTION_HRESULT" xml:space="preserve">
    <value>    Exception HResult: {0}</value>
    <comment>The exception handler in the catch block of the main routine uses these string to construct the exception report that it displays on the application's console.</comment>
  </data>
  <data name="MSG_EXCEPTION_SOURCE" xml:space="preserve">
    <value>    Exception Source: {0}</value>
    <comment>The exception handler in the catch block of the main routine uses these string to construct the exception report that it displays on the application's console.</comment>
  </data>
  <data name="MSG_EXCEPTION_STACKTRACE" xml:space="preserve">
    <value>    Exception StackTrace: {0}{1}</value>
    <comment>The exception handler in the catch block of the main routine uses these string to construct the exception report that it displays on the application's console.</comment>
  </data>
  <data name="MSG_EXCEPTION_TARGETSITE" xml:space="preserve">
    <value>    Exception TargetSite: {0}</value>
    <comment>The exception handler in the catch block of the main routine uses these string to construct the exception report that it displays on the application's console.</comment>
  </data>
  <data name="MSG_EXCEPTION_TYPE_AND_MESSAGE" xml:space="preserve">
    <value>An {0} exception arose.{2}{2}    Exception Message: {1}</value>
    <comment>The exception handler in the catch block of the main routine uses these string to construct the exception report that it displays on the application's console.</comment>
  </data>
  <data name="MSG_LABEL_FOR_LISTING" xml:space="preserve">
    <value>Listing</value>
    <comment>The DoTask routine on the main module constructs its summary report from this template.</comment>
  </data>
  <data name="MSG_LABEL_FOR_TABLE" xml:space="preserve">
    <value>Table  </value>
    <comment>The DoTask routine on the main module constructs its summary report from this template.</comment>
  </data>
  <data name="MSG_PROGRESS_UPDATE" xml:space="preserve">
    <value>    Listing record # {0}</value>
    <comment>Main module subroutine ListAllFieldsOnConsole uses this message to update the console.</comment>
  </data>
  <data name="MSG_PROMPT_FOR_TABLE_NAME" xml:space="preserve">
    <value>    Specify which table to process.</value>
    <comment>Static method PromptForTableName in the main module displays this text to request a missing table name.</comment>
  </data>
  <data name="MSG_RECORD_LABEL_PREFIX" xml:space="preserve">
    <value>Record Number {0,5}: </value>
    <comment>The first column (field) shown on the report is the record ID, which has this as its prefix. Everything else gets whitespace.</comment>
  </data>
  <data name="MSG_REPORT_HEADER" xml:space="preserve">
    <value>Report Name: Listing of everything in the Billing table{2}Run Date: {0} ({1} UTC){2}</value>
    <comment>Main module subroutine ListAllFieldsOnConsole uses this message to label the detail report.</comment>
  </data>
  <data name="MSG_SHUTDOWN_NORMALLY" xml:space="preserve">
    <value>Execution succeeded.</value>
    <comment>Helper method ShutdownNormally formats its report from this template.</comment>
  </data>
  <data name="MSG_SHUTDOWN_WITH_ERROR" xml:space="preserve">
    <value>Execution failed with status code {0:0x8x} ({1} decimal).</value>
    <comment>Helper method ShutdownAbnormally formats its report from this template.</comment>
  </data>
  <data name="MSG_TASK_SUMMARY" xml:space="preserve">
    <value>{0}{1} File Name = {2}</value>
    <comment>The DoTask routine on the main module constructs its summary report from this template.</comment>
  </data>
  <data name="MSG_WAIT_FOR_CARBON_UNIT" xml:space="preserve">
    <value>Press the RETURN key to return to Windows.</value>
    <comment>Helper method WaitForCarbonUnit formats its prompt from this template.</comment>
  </data>
  <data name="REPORT_FOOTER" xml:space="preserve">
    <value>End of report, Total records = {0}</value>
    <comment>Main module subroutine ListAllFieldsOnConsole uses this message to mark the end of the itemized listing report.</comment>
  </data>
  <data name="UNIQUE_COLUMN_NAME_TOSTRING" xml:space="preserve">
    <value>ColumnName = {0}, ColumnLabel = {1}</value>
    <comment>The ToString method on UniqueColumnName instances use this template to return their value.</comment>
  </data>
</root>